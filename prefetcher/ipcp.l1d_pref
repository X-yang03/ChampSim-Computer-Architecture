
#include "cache.h"

#define NUM_IP_TABLE_L1_ENTRIES 1024                        // IP table entries 
#define NUM_GHB_ENTRIES 16                                  // Entries in the GHB
#define NUM_IP_INDEX_BITS 10                                // Bits to index into the IP table 
#define NUM_IP_TAG_BITS 6                                   // Tag bits per IP table entry
#define S_TYPE 1                                            // stream
#define CS_TYPE 2                                           // constant stride
#define CPLX_TYPE 3                                         // complex stride
#define NL_TYPE 4                                           // next line

// #define SIG_DEBUG_PRINT
#ifdef SIG_DEBUG_PRINT
#define SIG_DP(x) x
#else
#define SIG_DP(x)
#endif

class IP_TABLE_L1 {
  public:
    uint64_t ip_tag;                 //IP标签
    uint64_t last_page;             // 上一个页面IP
    uint64_t last_cl_offset;           // 上一个缓存行偏移        
    int64_t last_stride;               // 上一个步幅         
    uint16_t ip_valid;                                      
    int conf;                                               // CS 置信度
    uint16_t signature;                                    
    uint16_t str_dir;                                       
    uint16_t str_valid;                                     
    uint16_t str_strength;                                  

    IP_TABLE_L1 () {
        ip_tag = 0;
        last_page = 0;
        last_cl_offset = 0;
        last_stride = 0;
        ip_valid = 0;
        signature = 0;
        conf = 0;
        str_dir = 0;
        str_valid = 0;
        str_strength = 0;
    };
};

class DELTA_PRED_TABLE {
public:
    int delta;
    int conf;

    DELTA_PRED_TABLE () {
        delta = 0;
        conf = 0;
    };        
};


IP_TABLE_L1 trackers_l1[NUM_CPUS][NUM_IP_TABLE_L1_ENTRIES];
DELTA_PRED_TABLE DPT_l1[NUM_CPUS][4096];
uint64_t ghb_l1[NUM_CPUS][NUM_GHB_ENTRIES];
uint64_t prev_cpu_cycle[NUM_CPUS];
uint64_t num_misses[NUM_CPUS];
float mpkc[NUM_CPUS] = {0};
int spec_nl[NUM_CPUS] = {0};

uint16_t update_sig_l1(uint16_t old_sig, int delta){                           
    uint16_t new_sig = 0;
    int sig_delta = 0;

// 7-bit sign magnitude form, since we need to track deltas from +63 to -63
    sig_delta = (delta < 0) ? (((-1) * delta) + (1 << 6)) : delta;
    new_sig = ((old_sig << 1) ^ sig_delta) & 0xFFF;                     // 12-bit signature

    return new_sig;
}



uint32_t encode_metadata(int stride, uint16_t type, int spec_nl){

uint32_t metadata = 0;

// first encode stride in the last 8 bits of the metadata
if(stride > 0)
    metadata = stride;
else
    metadata = ((-1*stride) | 0b1000000);

// encode the type of IP in the next 4 bits
metadata = metadata | (type << 8);

// encode the speculative NL bit in the next 1 bit
metadata = metadata | (spec_nl << 12);

return metadata;

}


void check_for_stream_l1(int index, uint64_t cl_addr, uint8_t cpu){
int pos_count=0, neg_count=0, count=0;
uint64_t check_addr = cl_addr;

// check for +ve stream
    for(int i=0; i<NUM_GHB_ENTRIES; i++){
        check_addr--;
        for(int j=0; j<NUM_GHB_ENTRIES; j++)
            if(check_addr == ghb_l1[cpu][j]){
                pos_count++;
                break;
            }
    }

check_addr = cl_addr;
// check for -ve stream
    for(int i=0; i<NUM_GHB_ENTRIES; i++){
        check_addr++;
        for(int j=0; j<NUM_GHB_ENTRIES; j++)
            if(check_addr == ghb_l1[cpu][j]){
                neg_count++;
                break;
            }
    }

    if(pos_count > neg_count){                                // stream direction is +ve
        trackers_l1[cpu][index].str_dir = 1;
        count = pos_count;
    }
    else{                                                     // stream direction is -ve
        trackers_l1[cpu][index].str_dir = 0;
        count = neg_count;
    }

if(count > NUM_GHB_ENTRIES/2){                                // stream is detected
    trackers_l1[cpu][index].str_valid = 1;
    if(count >= (NUM_GHB_ENTRIES*3)/4)                        // stream is classified as strong if more than 3/4th entries belong to stream
        trackers_l1[cpu][index].str_strength = 1;
}
else{
    if(trackers_l1[cpu][index].str_strength == 0)             // if identified as weak stream, we need to reset
        trackers_l1[cpu][index].str_valid = 0;
}

}

int update_conf(int stride, int pred_stride, int conf){
    if(stride == pred_stride){             // use 2-bit saturating counter for confidence
        conf++;
        if(conf > 3)
            conf = 3;
    } else {
        conf--;
        if(conf < 0)
            conf = 0;
    }

return conf;
}

void CACHE::l1d_prefetcher_initialize() 
{

}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{
  // 提取当前数据访问的基本属性
    uint64_t curr_page = addr >> LOG2_PAGE_SIZE;
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    uint64_t cl_offset = (addr >> LOG2_BLOCK_SIZE) & 0x3F;
    uint16_t signature = 0, last_signature = 0;
    int prefetch_degree = 0;
    int spec_nl_threshold = 0;
    int num_prefs = 0;
    uint32_t metadata = 0;
    uint16_t ip_tag = (ip >> NUM_IP_INDEX_BITS) & ((1 << NUM_IP_TAG_BITS) - 1);

    // 根据系统配置设置预取参数
    if (NUM_CPUS == 1) {
        prefetch_degree = 3;
        spec_nl_threshold = 15;
    } else {
        prefetch_degree = 2;
        spec_nl_threshold = 5;
    }

    // 更新缺失计数器
    if (cache_hit == 0)
        num_misses[cpu] += 1;

    // 当缺失次数超过一定阈值时更新 speculative next-line 位
    if (num_misses[cpu] == 256) {
        mpkc[cpu] = ((float)num_misses[cpu] / (current_core_cycle[cpu] - prev_cpu_cycle[cpu])) * 1000;
        prev_cpu_cycle[cpu] = current_core_cycle[cpu];
        spec_nl[cpu] = (mpkc[cpu] > spec_nl_threshold) ? 0 : 1;
        num_misses[cpu] = 0;
    }

    // 根据指令指针计算索引位
    int index = ip & ((1 << NUM_IP_INDEX_BITS) - 1);

    // 检查 IP 表中的历史信息
    if (trackers_l1[cpu][index].ip_tag != ip_tag) {
        // 新 IP 或冲突 IP
        if (trackers_l1[cpu][index].ip_valid == 0) {
            // 如果有效位为零，使用最新的 IP 信息更新
            trackers_l1[cpu][index].ip_tag = ip_tag;
            trackers_l1[cpu][index].last_page = curr_page;
            trackers_l1[cpu][index].last_cl_offset = cl_offset;
            trackers_l1[cpu][index].last_stride = 0;
            trackers_l1[cpu][index].signature = 0;
            trackers_l1[cpu][index].conf = 0;
            trackers_l1[cpu][index].str_valid = 0;
            trackers_l1[cpu][index].str_strength = 0;
            trackers_l1[cpu][index].str_dir = 0;
            trackers_l1[cpu][index].ip_valid = 1;
        } else {
            // 否则，重置有效位并保留先前的 IP
            trackers_l1[cpu][index].ip_valid = 0;
        }

        // 在遇到新 IP 时发出下一行预取
        uint64_t pf_address = ((addr >> LOG2_BLOCK_SIZE) + 1) << LOG2_BLOCK_SIZE;
        metadata = encode_metadata(1, NL_TYPE, spec_nl[cpu]);
        prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
        return;
    } else {
        // 如果遇到相同的 IP，则设置有效位
        trackers_l1[cpu][index].ip_valid = 1;
    }

    // 计算当前地址和上一个地址之间的步幅
    int64_t stride = (cl_offset > trackers_l1[cpu][index].last_cl_offset) ? 
                      (cl_offset - trackers_l1[cpu][index].last_cl_offset) : 
                      ((trackers_l1[cpu][index].last_cl_offset - cl_offset) * -1);

    // 如果两次连续访问相同地址，则不执行任何操作
    if (stride == 0)
        return;

    // 页面边界学习
    if (curr_page != trackers_l1[cpu][index].last_page) {
        if (stride < 0)
            stride += 64;
        else
            stride -= 64;
    }

    // 更新常量步幅 (CS) 置信度
    trackers_l1[cpu][index].conf = update_conf(stride, trackers_l1[cpu][index].last_stride, trackers_l1[cpu][index].conf);

    // 仅在置信度为零时更新 CS
    if (trackers_l1[cpu][index].conf == 0)
        trackers_l1[cpu][index].last_stride = stride;

    last_signature = trackers_l1[cpu][index].signature;

    // 更新复杂步幅 (CPLX) 置信度
    DPT_l1[cpu][last_signature].conf = update_conf(stride, DPT_l1[cpu][last_signature].delta, DPT_l1[cpu][last_signature].conf);

    // 仅在置信度为零时更新 CPLX
    if (DPT_l1[cpu][last_signature].conf == 0)
        DPT_l1[cpu][last_signature].delta = stride;

    // 在 IP 表中计算并更新新的签名
    signature = update_sig_l1(last_signature, stride);
    trackers_l1[cpu][index].signature = signature;

    // 检查 GHB 中的流 IP
    check_for_stream_l1(index, cl_addr, cpu);

    // 用于分析的调试打印 (取消或注释 SIG_DP 宏以进行调试)
    SIG_DP(
        cout << ip << ", " << cache_hit << ", " << cl_addr << ", " << addr << ", " << stride << "; ";
        cout << last_signature << ", " << DPT_l1[cpu][last_signature].delta << ", " << DPT_l1[cpu][last_signature].conf << "; ";
        cout << trackers_l1[cpu][index].last_stride << ", " << stride << ", " << trackers_l1[cpu][index].conf << ", " << "; ";
    );

    // 根据预取策略发出预取
    if (trackers_l1[cpu][index].str_valid == 1) {
        // 流 IP：以流的两倍预取
        prefetch_degree = prefetch_degree * 2;
        for (int i = 0; i < prefetch_degree; i++) {
            uint64_t pf_address = 0;
            if (trackers_l1[cpu][index].str_dir == 1) {
                //
                pf_address = (cl_addr + i + 1) << LOG2_BLOCK_SIZE;
                metadata = encode_metadata(1, S_TYPE, spec_nl[cpu]);    // stride is 1
            }
            else{                                                       // -ve stream
                pf_address = (cl_addr - i - 1) << LOG2_BLOCK_SIZE;
                metadata = encode_metadata(-1, S_TYPE, spec_nl[cpu]);   // stride is -1
            }

            // Check if prefetch address is in same 4 KB page
            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE)){
                break;
            }

            prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
            num_prefs++;
            SIG_DP(cout << "1, ");
            }

    } else if(trackers_l1[cpu][index].conf > 1 && trackers_l1[cpu][index].last_stride != 0){            // CS IP  
        for (int i=0; i<prefetch_degree; i++) {
            uint64_t pf_address = (cl_addr + (trackers_l1[cpu][index].last_stride*(i+1))) << LOG2_BLOCK_SIZE;

            // Check if prefetch address is in same 4 KB page
            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE)){
                break;
            }

            metadata = encode_metadata(trackers_l1[cpu][index].last_stride, CS_TYPE, spec_nl[cpu]);
            prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
            num_prefs++;
            SIG_DP(cout << trackers_l1[cpu][index].last_stride << ", ");
        }
    } else if(DPT_l1[cpu][signature].conf >= 0 && DPT_l1[cpu][signature].delta != 0) {  // if conf>=0, continue looking for delta
        int pref_offset = 0,i=0;                                                        // CPLX IP
        for (i=0; i<prefetch_degree; i++) {
            pref_offset += DPT_l1[cpu][signature].delta;
            uint64_t pf_address = ((cl_addr + pref_offset) << LOG2_BLOCK_SIZE);

            // Check if prefetch address is in same 4 KB page
            if (((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE)) || 
                    (DPT_l1[cpu][signature].conf == -1) ||
                    (DPT_l1[cpu][signature].delta == 0)){
                // if new entry in DPT or delta is zero, break
                break;
            }

            // we are not prefetching at L2 for CPLX type, so encode delta as 0
            metadata = encode_metadata(0, CPLX_TYPE, spec_nl[cpu]);
            if(DPT_l1[cpu][signature].conf > 0){                                 // prefetch only when conf>0 for CPLX
                prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
                num_prefs++;
                SIG_DP(cout << pref_offset << ", ");
            }
            signature = update_sig_l1(signature, DPT_l1[cpu][signature].delta);
        }
    } 

// if no prefetches are issued till now, speculatively issue a next_line prefetch
if(num_prefs == 0 && spec_nl[cpu] == 1){                                        // NL IP
    uint64_t pf_address = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;  
    metadata = encode_metadata(1, NL_TYPE, spec_nl[cpu]);
    prefetch_line(ip, addr, pf_address, FILL_L1, metadata);
    SIG_DP(cout << "1, ");
}

SIG_DP(cout << endl);

// update the IP table entries
trackers_l1[cpu][index].last_cl_offset = cl_offset;
trackers_l1[cpu][index].last_page = curr_page;

// update GHB
// search for matching cl addr
int ghb_index=0;
for(ghb_index = 0; ghb_index < NUM_GHB_ENTRIES; ghb_index++)
    if(cl_addr == ghb_l1[cpu][ghb_index])
        break;
// only update the GHB upon finding a new cl address
if(ghb_index == NUM_GHB_ENTRIES){
for(ghb_index=NUM_GHB_ENTRIES-1; ghb_index>0; ghb_index--)
    ghb_l1[cpu][ghb_index] = ghb_l1[cpu][ghb_index-1];
ghb_l1[cpu][0] = cl_addr;
}

return;
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{

}
void CACHE::l1d_prefetcher_final_stats()
{
cout << endl;
}
